Mesh Geometry
=============
.. _geometry-mesh:

* The following section deals with :class:`~bpy.types.Object` which are of type 'MESH', containing Mesh
  Data(Mesh-Object)
* Each :class:`~bpy.types.Object` is exported as a combination of :class:`~pyffi.formats.nif.NifFormat.NiTriShape` and
  :class:`~pyffi.formats.nif.NifFormat.NiNode`.
* The :class:`~bpy.types.Mesh` is exported to a :class:`~pyffi.formats.nif.NifFormat.NiTriShape`'s
  :class:`~pyffi.formats.nif.NifFormat.NiTriShapeData`.

**Example:**

#. Start Blender and empty the scene.
#. Create any Mesh-Object to the scene, eg. cube primitive: 

#. Give the Object an appropriate name.

  - In the **Object Tab** 
  - Generic names are automatically generated, unique names help distinguish objects, 

.. Notes:

* The Nif format only supports triangle based geometry.

* Blender quads and n-gons are exported as triangles, which may lead to differences in rendered geometry.

* Strips (:class:`~pyffi.formats.nif.NifFormat.NiTriStrips`) are available but not developer supported as they are 
  `unnecessary for current hardware <http://tomsdxfaq.blogspot.com/2005_12_01_archive.html>`_.
  
.. _geometry-doubleside:

Double-Sided Mesh
-----------------

* Each triangle is composed of 3 vertices, edges and a face.
* To decide which way the face is pointing a vector(normal), perpendicular to the face is used.
* This normal vector can be flipped to either side of the triangle; a common source for triangles appearing to not
  render.

Sometimes you want to allow the mesh to ignore the normal and render both sides, eg a cloak.

- In the **Properties** Editor, in the **Material Properties** Tab
- Enable/Disable **Backface Culling**, see notes for more detail.

Double Sided Mesh 

- Adds a :class:`~pyffi.formats.nif.NifFormat.NiStencilProperty` or similiar, see :ref:`Properties - Stencil Property
  <properties-stencil>` for more info.
- For Skyrim, tick the Shader Property flag "Double Sided" in the Niftools Shader Panel.

.. _geometry-uv:

UV Unwrapping/Mapping
---------------------

* UV-unwrapping is the process of unfolding all the faces onto a flat plane,
  see `Cube Unwrap <http://en.wikipedia.org/wiki/File:Cube_Representative_UV_Unwrapping.png>`_.
* The UV-unwrapping process creates a UV Map layer.
* The UV Map Layer is used to layer connect a :class:`~bpy.types.Texture` to
  :class:`~bpy.types.Mesh` and allows visual representation of where each face is located on texture.
* Each :class:`~bpy.types.TextureSlot` requires that the user select the UV Map
  Layer that was generated by unwrapping, See :ref:`Textures Section <textures>`.

**Example:**

#. :ref:`Create a mesh-object <geometry-mesh>`.
#. In **Edit Mode**, select the faces you want to unwrap.
#. Press ``U``, select **Unwrap** > **Smart UV Project** or an unwrapping
   algorithm of your choice.

**Notes:**

* UV-unwrapping adds a :class:`~bpy.types.MeshTextureFaceLayer` to the Object.
* Although Blender allows multiple :class:`~bpy.types.MeshTextureFaceLayer`, most versions of the Nif format only
  support one UV layer

.. _geometry-vertexcolor:

Vertex Color & Alpha
--------------------

**Example:**

#. :ref:`Create a mesh-object <geometry-mesh>`.
#. Switch to Vertex Paint mode, this automatically adds a base vertex color layer. Make sure you name this layer 'RGBA'
#. Apply the desired vertex colors evenly to the vertex.
#. You can alter the alpha channel using the 'Add Alpha' and 'Erase Alpha' brushes.

**Notes:**

* The Nif format only supports a single color per vertex, whereas Blender vertex color per face vertex.
* Blender treats the vertex as if the faces had been split apart, each face can have a different colour for that vertex.
* `This image should clarify per-face vertex colouring
  <http://i211.photobucket.com/albums/bb189/NifTools/Blender/documentation/per_face_vertex_color.jpg>`_
* On export, the scripts will create extra vertices for different vertex colors per face.


.. _geometry-shapekeys:

Shape Key Animations
--------------------

**Example:**

#. :ref:`Create a mesh-object <geometry-mesh>`.
#. Add relative shape keys to your mesh.
#. Keyframe each shape key's value so that the key influences the shape of the mesh at the desired time.